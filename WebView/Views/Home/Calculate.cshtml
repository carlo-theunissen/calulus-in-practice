@using Logic.Models
@model CalculateViewModel


<div class="formulaContainer">
    <div id="mynetwork">
    </div>
</div>

<div class="formulaContainer">
    @if (Model.Connected)
    {
        <b>Is connected</b>
    }
    else
    {
        <p>Is not connected</p>
    }
</div>

<div class="formulaContainer">
	<canvas id="plot0">
	</canvas>
</div>

<div class="formulaContainer">
	Calculated: @Model.Prediction
</div>


<script type="text/javascript">
    // create an array with nodes
    var nodes = new vis.DataSet([
        @foreach (var modelNode in Model.Nodes)
        {
	        
            @Html.Raw("{id: " + modelNode.Id + ", label: 'Node " + modelNode.Id + "'},");
        }
    ]);

    // create an array with edges
    var edges = new vis.DataSet([
        @foreach (var modelNode in Model.Nodes)
        {
            foreach (var modelNodeSibbling in modelNode.Sibblings)
            {
	            if (modelNodeSibbling.Id > modelNode.Id)
	            {
		            @Html.Raw("{from: " + modelNode.Id + ", to: " + modelNodeSibbling.Id + "},")
	            }
            }  
        }
    ]);

    // create a network
    var container = document.getElementById('mynetwork');
    var data = {
        nodes: nodes,
        edges: edges
    };
    var options = {};
    var network = new vis.Network(container, data, options);
</script>

<script>
		var config = {
			type: 'line',
			data: {
				labels: [
					@for (double x = 0; x < 1; x += Model.Lambda)
					{
						@Html.Raw(x + ",")
					}
				],
				datasets: [
					{
						label: 'My First dataset',
						data: [
							@for (var x = 0; x < Model.Prob.Length; x += 1)
							{
								@Html.Raw(Model.Prob[x] + ",")
							}],
						fill: false,
					}
					
				]
			},
		};
		
		var ctx = document.getElementById('plot0').getContext('2d');
		window.myLine = new Chart(ctx, config);
		
	</script>